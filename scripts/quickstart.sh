#!/usr/bin/env bash
# /qompassai/psql/scripts/quickstart.sh
# Qompass AI PostgreSQL (Cross-Platform) Quick Start
# Copyright (C) 2025 Qompass AI
####################################################

set -euo pipefail

PORT=5432
DATA_DIR="$HOME/.local/share/qompass/harbor"
PG_LOG="$HOME/.local/share/qompass/pg.log"
DB_NAME="qompass"
DBX_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/nvim/dbx.lua"
DB_ENTRY_NAME="Qompass AI Harbor"

mkdir -p "$(dirname "$DBX_FILE")"
mkdir -p "$HOME/.local/share/qompass"

detect_os() {
	case "$(uname -s)" in
	Linux*) OS="linux" ;;
	Darwin*) OS="macos" ;;
	CYGWIN* | MINGW* | MSYS* | Windows*) OS="windows" ;;
	*) OS="unknown" ;;
	esac
}

detect_linux_distro() {
	if [ -f /etc/os-release ]; then
		. /etc/os-release
		DISTRO_ID=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
		DISTRO_LIKE=$(echo "${ID_LIKE:-}" | tr '[:upper:]' '[:lower:]')
	else
		DISTRO_ID="unknown"
		DISTRO_LIKE=""
	fi
}

is_postgres_installed() {
	if command -v psql >/dev/null; then
		echo "‚úÖ PostgreSQL is already installed: $(psql --version)"
		return 0
	fi
	return 1
}

install_postgresql_linux() {
	echo "==> Installing PostgreSQL for: $DISTRO_ID"
	case "$DISTRO_ID" in
	debian | ubuntu | linuxmint | pop)
		sudo apt update
		sudo apt install -y postgresql postgresql-contrib
		;;
	arch | manjaro)
		sudo pacman -Sy --noconfirm postgresql
		;;
	fedora | rhel | centos)
		sudo dnf install -y postgresql-server postgresql-contrib
		;;
	nixos)
		echo "‚ùó On NixOS, use configuration.nix or nix-shell to enable PostgreSQL."
		;;
	*)
		echo "‚ùå Unsupported Linux distro. Please install PostgreSQL manually."
		exit 1
		;;
	esac
}

install_postgresql_macos() {
	echo "==> Installing PostgreSQL on macOS..."
	if ! command -v brew >/dev/null; then
		echo "Installing Homebrew..."
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
	brew install postgresql
	brew services start postgresql
}

install_postgresql_windows() {
	echo "‚ÑπÔ∏è Native Windows install is not automated."
	echo "Get the installer from: https://www.postgresql.org/download/windows/"
	exit 1
}

setup_user_cluster() {
	if [ ! -d "$DATA_DIR/base" ]; then
		echo "==> Initializing user-local PostgreSQL cluster in $DATA_DIR"
		initdb -D "$DATA_DIR"
	fi

	if ! pg_ctl -D "$DATA_DIR" -l "$PG_LOG" status >/dev/null 2>&1; then
		echo "==> Starting PostgreSQL server..."
		pg_ctl -D "$DATA_DIR" -l "$PG_LOG" start
		sleep 2
	else
		echo "‚ÑπÔ∏è PostgreSQL server already running."
	fi

	if ! psql -h localhost -p "$PORT" -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
		echo "‚úÖ Creating database: $DB_NAME"
		createdb -h localhost -p "$PORT" "$DB_NAME"
	else
		echo "‚ÑπÔ∏è Database '$DB_NAME' already exists."
	fi
}

write_dbx_file() {
	echo "==> Writing database entry to: $DBX_FILE"

	cat >"$DBX_FILE" <<EOF
-- Qompass AI Diver Database Config
-- Auto-generated by quickstart.sh
return {
  {
    name = "${DB_ENTRY_NAME}",
    url = "postgresql://$USER@localhost:${PORT}/${DB_NAME}"
  }
}
EOF

	echo "‚úÖ DBX file updated: $DBX_FILE"
}

main() {
	detect_os
	echo "üîç OS detected: $OS"

	if ! is_postgres_installed; then
		echo "==> PostgreSQL not detected, installing..."
		if [ "$OS" = "linux" ]; then
			detect_linux_distro
			install_postgresql_linux
		elif [ "$OS" = "macos" ]; then
			install_postgresql_macos
		elif [ "$OS" = "windows" ]; then
			install_postgresql_windows
		else
			echo "‚ùå Unsupported OS: $OS"
			exit 1
		fi
	fi

	setup_user_cluster
	write_dbx_file

	echo
	echo "üöÄ Your local PostgreSQL instance is ready."
	echo "üì° Connection URL:"
	echo "   postgresql://$USER@localhost:$PORT/$DB_NAME"
	echo
	echo "üß† Use this in Neovim DBUI or CLI:"
	echo "   psql -h localhost -p $PORT -U $USER -d $DB_NAME"
}

main "$@"
